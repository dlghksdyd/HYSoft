# generate_icon_keys.py
# -*- coding: utf-8 -*-
"""
./png 폴더의 .png 파일명을 스캔해 IconKeys.cs를 생성합니다.

- enum EIconKeys: 파일명(확장자 제외)을 PascalCase로 변환해 멤버 생성
- IconKeys.IconMap: enum → "Icons/png/파일명.png" 매핑 딕셔너리 생성

주의:
- PNG 파일은 프로젝트 내 "Icons/png/" 경로에 있어야 하며 Build Action=Resource 로 설정해야 함.
- 스크립트는 현재 위치 기준 ./png 폴더를 읽어서 IconKeys.cs를 만듭니다.
"""

import os
import re
from datetime import datetime

# ===== 설정 =====
NAMESPACE = "HYSoft.Presentation.Styles.Icons"
OUTPUT_CS = "IconKeys.cs"

# 파일 시스템에서 스캔할 폴더 (스크립트 기준)
INPUT_DIR = "png"              # ex) ./png

# 어셈블리 내 Resource 상대경로 prefix (pack URI에 들어갈 경로)
RESOURCE_PREFIX = "Icons/png"
# ================

def to_pascal_case(name: str) -> str:
    """파일명을 PascalCase C# 식별자로 변환"""
    base = os.path.splitext(name)[0]
    parts = re.split(r"[^0-9A-Za-z]+", base)
    parts = [p for p in parts if p]
    pascal = "".join(p[:1].upper() + p[1:] for p in parts)
    if pascal and pascal[0].isdigit():
        pascal = "_" + pascal
    pascal = re.sub(r"[^0-9A-Za-z_]", "", pascal)
    return pascal or "_Icon"

def main():
    script_dir = os.path.abspath(os.path.dirname(__file__))
    scan_dir = os.path.join(script_dir, INPUT_DIR)

    if not os.path.isdir(scan_dir):
        raise SystemExit(f"[ERROR] '{INPUT_DIR}' 폴더가 없습니다: {scan_dir}")

    files = [f for f in os.listdir(scan_dir) if f.lower().endswith(".png")]
    if not files:
        raise SystemExit(f"[ERROR] '{INPUT_DIR}' 폴더에 .png 파일이 없습니다.")

    files.sort(key=lambda s: s.lower())

    enum_items = []
    map_entries = []
    used = set()

    for fname in files:
        enum_name = to_pascal_case(fname)
        base = enum_name
        i = 2
        while enum_name in used:
            enum_name = f"{base}{i}"
            i += 1
        used.add(enum_name)
        enum_items.append(enum_name)
        # pack URI용 경로: "Icons/png/xxx.png"
        map_entries.append((enum_name, f"{RESOURCE_PREFIX}/{fname}"))

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    enum_body = ",\n        ".join(enum_items)
    dict_body = ",\n            ".join(
        f'{{ EIconKeys.{ename}, "{relpath}" }}'
        for ename, relpath in map_entries
    )

    cs_code = """// <auto-generated>
//   This file was generated by generate_icon_keys.py
//   Generated: {timestamp}
// </auto-generated>

using System;
using System.Collections.Generic;

namespace {namespace}
{{
    /// <summary>
    /// 아이콘 키 Enum (자동 생성)
    /// </summary>
    public enum EIconKeys
    {{
        {enum_body}
    }}

    /// <summary>
    /// 아이콘 키 → 리소스 상대경로 매핑 (자동 생성)
    /// </summary>
    internal static class IconKeys
    {{
        public static readonly Dictionary<EIconKeys, string> IconMap = new Dictionary<EIconKeys, string>
        {{
            {dict_body}
        }};
    }}
}}
""".format(
        timestamp=timestamp,
        namespace=NAMESPACE,
        enum_body=enum_body,
        dict_body=dict_body,
    )

    out_path = os.path.join(script_dir, OUTPUT_CS)
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(cs_code)

    print(f"[OK] Generated: {out_path}")
    print(f"[INFO] Found {len(files)} PNG(s) in '{scan_dir}'")

if __name__ == "__main__":
    main()
