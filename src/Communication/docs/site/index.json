{
  "api/HYSoft.Communication.Database.Mssql.DbContextBase.html": {
    "href": "api/HYSoft.Communication.Database.Mssql.DbContextBase.html",
    "title": "Class DbContextBase | HYSoft",
    "summary": "Class DbContextBase MSSQL 데이터베이스 연결 및 모델 구성을 위한 추상 DbContext 기본 클래스입니다. 파생 클래스는 ConfigureModel(ModelBuilder)를 구현하여 모델 매핑을 정의해야 합니다. Inheritance object DbContext DbContextBase Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Database.Mssql Assembly: Communication.dll Syntax public abstract class DbContextBase : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors View Source DbContextBase() 기본 생성자입니다. Initialize(string, string, string, string, string)가 먼저 호출되지 않으면 예외가 발생합니다. Declaration protected DbContextBase() Exceptions Type Condition InvalidOperationException 아직 Initialize(string, string, string, string, string)가 호출되지 않은 경우 발생합니다. Methods View Source ConfigureModel(ModelBuilder) 파생 클래스에서 엔터티 모델을 구성할 때 구현해야 하는 메서드입니다. OnModelCreating(ModelBuilder)에서 호출됩니다. Declaration protected abstract void ConfigureModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder 모델 구성을 위한 ModelBuilder 인스턴스 View Source Initialize(string, string, string, string, string) MSSQL 연결 문자열을 구성하고 내부 DbContextOptions<TContext>를 초기화합니다. 애플리케이션 시작 시 한 번만 호출하는 것을 권장합니다. Declaration public static void Initialize(string server, string port, string uid, string pwd, string database) Parameters Type Name Description string server MSSQL 서버 주소 string port MSSQL 서버 포트 string uid 데이터베이스 사용자 ID string pwd 데이터베이스 비밀번호 string database 연결할 데이터베이스 이름 View Source OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. Declaration protected override sealed void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Overrides DbContext.OnModelCreating(ModelBuilder) Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples. Implements IInfrastructure<T> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable"
  },
  "api/HYSoft.Communication.Database.Mssql.html": {
    "href": "api/HYSoft.Communication.Database.Mssql.html",
    "title": "Namespace HYSoft.Communication.Database.Mssql | HYSoft",
    "summary": "Namespace HYSoft.Communication.Database.Mssql Classes DbContextBase MSSQL 데이터베이스 연결 및 모델 구성을 위한 추상 DbContext 기본 클래스입니다. 파생 클래스는 ConfigureModel(ModelBuilder)를 구현하여 모델 매핑을 정의해야 합니다."
  },
  "api/HYSoft.Communication.Tcp.Client.Protocol.FileTransfer.FileTransferClient.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.Protocol.FileTransfer.FileTransferClient.html",
    "title": "Class FileTransferClient | HYSoft",
    "summary": "Class FileTransferClient 파일 전송 클라이언트 구현 클래스입니다. 서버와 지정된 프로토콜로 파일 전송을 수행하며, 헤더 전송 → 서버 응답(Resume 여부) → 본문 전송 → Tail 전송 → 최종 상태 응답의 순서를 따릅니다. Inheritance object FileTransferClient Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Client.Protocol.FileTransfer Assembly: Communication.dll Syntax public class FileTransferClient Constructors View Source FileTransferClient(TcpClientOptions) FileTransferClient 클래스의 새 인스턴스를 초기화합니다. Declaration public FileTransferClient(TcpClientOptions options) Parameters Type Name Description TcpClientOptions options 서버 접속 정보를 포함한 TcpClientOptions. Methods View Source SendFileAsync(string) 지정한 파일을 서버로 전송합니다. Declaration public Task SendFileAsync(string filePath) Parameters Type Name Description string filePath 전송할 로컬 파일 경로. Returns Type Description Task 비동기 작업을 나타내는 Task. 전송 완료 시 정상적으로 완료되며, 서버가 오류를 반환하거나 네트워크 오류 발생 시 IOException 또는 InvalidOperationException이 발생합니다. Remarks 프로토콜 순서: 클라이언트 → 서버: 헤더 [MAGIC_HEADER(4)][Flags(1)][FileSize(8)][NameLen(2)][FileName] 서버 → 클라이언트: 응답 [Status(1)][StartOffset(8)] 클라이언트 → 서버: 파일 데이터 (StartOffset ~ 끝까지) 클라이언트 → 서버: Tail [MAGIC_TAIL(4)][CRC32(4)] 서버 → 클라이언트: 최종 상태 [FinalStatus(1)] Exceptions Type Condition ArgumentException filePath가 null 또는 빈 문자열일 경우. FileNotFoundException 지정된 경로에 파일이 존재하지 않는 경우. IOException 파일 크기 오류, 서버 오류 응답, 전송 중단 등 입출력 예외가 발생한 경우. InvalidOperationException 이미 다른 파일 전송 작업이 진행 중인 경우."
  },
  "api/HYSoft.Communication.Tcp.Client.Protocol.FileTransfer.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.Protocol.FileTransfer.html",
    "title": "Namespace HYSoft.Communication.Tcp.Client.Protocol.FileTransfer | HYSoft",
    "summary": "Namespace HYSoft.Communication.Tcp.Client.Protocol.FileTransfer Classes FileTransferClient 파일 전송 클라이언트 구현 클래스입니다. 서버와 지정된 프로토콜로 파일 전송을 수행하며, 헤더 전송 → 서버 응답(Resume 여부) → 본문 전송 → Tail 전송 → 최종 상태 응답의 순서를 따릅니다."
  },
  "api/HYSoft.Communication.Tcp.Client.TcpClient.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.TcpClient.html",
    "title": "Class TcpClient | HYSoft",
    "summary": "Class TcpClient 비동기 TCP 클라이언트 구현 클래스입니다. 서버에 연결하고 데이터를 송수신할 수 있도록 지원합니다. Inheritance object TcpClient Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Client Assembly: Communication.dll Syntax public class TcpClient Fields View Source Guid 클라이언트 인스턴스의 고유 식별자입니다. Declaration public readonly Guid Guid Field Value Type Description Guid Properties View Source IsDisposed 이 인스턴스가 이미 해제(Dispose)되었는지 여부를 나타냅니다. Declaration public bool IsDisposed { get; } Property Value Type Description bool Methods View Source ConnectAsync() 서버에 비동기적으로 연결을 시도합니다. 이미 연결된 경우 정상 상태이면 재연결하지 않습니다. Declaration public Task ConnectAsync() Returns Type Description Task 비동기 작업을 나타내는 Task. Exceptions Type Condition TimeoutException 지정된 연결 제한 시간 내에 연결하지 못한 경우 발생합니다. InvalidOperationException 객체가 해제되었거나 소켓이 이미 닫힌 경우 발생합니다. View Source ReceiveAsync(Memory<byte>) 지정된 버퍼 크기만큼 서버에서 데이터를 수신합니다. Declaration public Task ReceiveAsync(Memory<byte> buffer) Parameters Type Name Description Memory<byte> buffer 수신한 데이터를 저장할 버퍼입니다. Returns Type Description Task 비동기 작업을 나타내는 Task. Exceptions Type Condition InvalidOperationException 소켓이 연결되지 않았거나 이미 해제된 경우 발생합니다. TimeoutException 수신이 지정된 제한 시간 내에 완료되지 않은 경우 발생합니다. SocketException 네트워크 오류 또는 원격 호스트가 연결을 종료한 경우 발생합니다. View Source SendAsync(IReadOnlyList<ReadOnlyMemory<byte>>) 지정한 여러 버퍼의 데이터를 순차적으로 서버로 전송합니다. Declaration public Task SendAsync(IReadOnlyList<ReadOnlyMemory<byte>> buffers) Parameters Type Name Description IReadOnlyList<ReadOnlyMemory<byte>> buffers 전송할 데이터 버퍼 목록입니다. Returns Type Description Task 비동기 작업을 나타내는 Task. Exceptions Type Condition InvalidOperationException 소켓이 연결되지 않았거나 이미 해제된 경우 발생합니다. TimeoutException 송신이 지정된 제한 시간 내에 완료되지 않은 경우 발생합니다. SocketException 네트워크 오류가 발생한 경우 발생합니다. View Source SendAsync(ReadOnlyMemory<byte>) 지정한 버퍼의 데이터를 서버로 비동기 전송합니다. Declaration public Task SendAsync(ReadOnlyMemory<byte> buffer) Parameters Type Name Description ReadOnlyMemory<byte> buffer 전송할 데이터 버퍼입니다. Returns Type Description Task 비동기 작업을 나타내는 Task. Exceptions Type Condition InvalidOperationException 소켓이 연결되지 않았거나 이미 해제된 경우 발생합니다. TimeoutException 송신이 지정된 제한 시간 내에 완료되지 않은 경우 발생합니다. SocketException 네트워크 오류가 발생한 경우 발생합니다."
  },
  "api/HYSoft.Communication.Tcp.Client.TcpClientManager.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.TcpClientManager.html",
    "title": "Class TcpClientManager | HYSoft",
    "summary": "Class TcpClientManager TcpClient 인스턴스를 생성하고 관리하는 정적 매니저 클래스입니다. Inheritance object TcpClientManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Client Assembly: Communication.dll Syntax public static class TcpClientManager Methods View Source Create(TcpClientOptions) 지정된 옵션을 사용하여 새로운 TcpClient 인스턴스를 생성하고 내부 관리 목록에 등록합니다. Declaration public static TcpClient Create(TcpClientOptions options) Parameters Type Name Description TcpClientOptions options 생성 시 사용할 TcpClientOptions 설정입니다. Returns Type Description TcpClient 생성된 TcpClient 인스턴스입니다. Exceptions Type Condition ArgumentNullException options가 null인 경우 발생합니다. InvalidOperationException 클라이언트를 내부 딕셔너리에 등록하지 못한 경우 발생합니다. View Source Dispose(TcpClient) 지정된 TcpClient 인스턴스를 해제(dispose)하고 내부 관리 목록에서 제거합니다. Declaration public static void Dispose(TcpClient client) Parameters Type Name Description TcpClient client 해제할 TcpClient 인스턴스입니다. Exceptions Type Condition ArgumentNullException client가 null인 경우 발생합니다."
  },
  "api/HYSoft.Communication.Tcp.Client.TcpClientOptions.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.TcpClientOptions.html",
    "title": "Class TcpClientOptions | HYSoft",
    "summary": "Class TcpClientOptions TCP 클라이언트의 동작을 정의하는 옵션 클래스입니다. Inheritance object TcpClientOptions Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Client Assembly: Communication.dll Syntax public sealed class TcpClientOptions Constructors View Source TcpClientOptions(IPAddress, int) TCP 클라이언트의 동작을 정의하는 옵션 클래스입니다. Declaration public TcpClientOptions(IPAddress host, int port) Parameters Type Name Description IPAddress host 서버 호스트 IP 주소입니다. int port 서버 포트 번호입니다. Properties View Source ConnectTimeout 서버에 연결할 때의 최대 대기 시간입니다. 기본값은 5초입니다. Declaration public TimeSpan ConnectTimeout { get; set; } Property Value Type Description TimeSpan View Source Host 연결할 서버의 호스트 IP 주소를 가져옵니다. Declaration public IPAddress Host { get; } Property Value Type Description IPAddress View Source NoDelay Nagle 알고리즘을 비활성화할지 여부를 나타냅니다. 기본값은 true이며, 작은 패킷도 지연 없이 즉시 전송됩니다. Declaration public bool NoDelay { get; set; } Property Value Type Description bool View Source Port 연결할 서버의 포트 번호를 가져옵니다. Declaration public int Port { get; } Property Value Type Description int View Source ReceiveBufferSize 소켓 수신 버퍼의 크기(바이트)를 가져오거나 설정합니다. 기본값은 64KB입니다. Declaration public int ReceiveBufferSize { get; set; } Property Value Type Description int View Source ReceiveTimeout 수신 작업이 유휴 상태일 때의 최대 대기 시간입니다. 기본값은 10초입니다. Declaration public TimeSpan ReceiveTimeout { get; set; } Property Value Type Description TimeSpan View Source SendBufferSize 소켓 송신 버퍼의 크기(바이트)를 가져오거나 설정합니다. 기본값은 64KB입니다. Declaration public int SendBufferSize { get; set; } Property Value Type Description int View Source SendTimeout 송신 작업이 유휴 상태일 때의 최대 대기 시간입니다. 기본값은 10초입니다. Declaration public TimeSpan SendTimeout { get; set; } Property Value Type Description TimeSpan"
  },
  "api/HYSoft.Communication.Tcp.Client.html": {
    "href": "api/HYSoft.Communication.Tcp.Client.html",
    "title": "Namespace HYSoft.Communication.Tcp.Client | HYSoft",
    "summary": "Namespace HYSoft.Communication.Tcp.Client Classes TcpClient 비동기 TCP 클라이언트 구현 클래스입니다. 서버에 연결하고 데이터를 송수신할 수 있도록 지원합니다. TcpClientManager TcpClient 인스턴스를 생성하고 관리하는 정적 매니저 클래스입니다. TcpClientOptions TCP 클라이언트의 동작을 정의하는 옵션 클래스입니다."
  },
  "api/HYSoft.Communication.Tcp.Server.Protocol.FileTransfer.FileTransferServer.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.Protocol.FileTransfer.FileTransferServer.html",
    "title": "Class FileTransferServer | HYSoft",
    "summary": "Class FileTransferServer 간단한 파일 전송 서버 구현. 클라이언트 프로토콜: [MAGIC_HEADER(4)=\"FT10\"][Flags(1)][FileSize(8)][NameLen(2)][FileName(UTF-8)] 서버 응답: [Status(1: 0x00=OK,0x01=RESUME)][StartOffset(8)] 클라: StartOffset부터 파일 바이트 전송 클라: [MAGIC_TAIL(4)=\"FTEN\"][CRC32(4)] (CRC32는 파일 전체 기준) 서버: [FinalStatus(1): 0x00=OK, 0xFF=ERROR] Inheritance object FileTransferServer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Server.Protocol.FileTransfer Assembly: Communication.dll Syntax public class FileTransferServer Constructors View Source FileTransferServer(TcpServerOptions, string?) FileTransferServer 클래스의 새 인스턴스를 초기화합니다. Declaration public FileTransferServer(TcpServerOptions options, string? storageRoot = null) Parameters Type Name Description TcpServerOptions options 서버 소켓 설정을 포함하는 TcpServerOptions. string storageRoot 수신한 파일을 저장할 루트 폴더 경로. 지정하지 않으면 AppContext.BaseDirectory\\received 폴더가 사용됩니다. Methods View Source ReceiveFileAsync() 파일 수신 서버를 시작하고, 클라이언트 연결에서 전송되는 파일을 수신할 수 있도록 준비합니다. Declaration public Task ReceiveFileAsync() Returns Type Description Task 비동기적으로 서버 소켓이 시작되는 작업을 나타내는 Task. Remarks 내부적으로 StartAsync()를 호출하고, 데이터 수신 이벤트 핸들러(DataReceived)를 등록합니다."
  },
  "api/HYSoft.Communication.Tcp.Server.Protocol.FileTransfer.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.Protocol.FileTransfer.html",
    "title": "Namespace HYSoft.Communication.Tcp.Server.Protocol.FileTransfer | HYSoft",
    "summary": "Namespace HYSoft.Communication.Tcp.Server.Protocol.FileTransfer Classes FileTransferServer 간단한 파일 전송 서버 구현. 클라이언트 프로토콜: [MAGIC_HEADER(4)=\"FT10\"][Flags(1)][FileSize(8)][NameLen(2)][FileName(UTF-8)] 서버 응답: [Status(1: 0x00=OK,0x01=RESUME)][StartOffset(8)] 클라: StartOffset부터 파일 바이트 전송 클라: [MAGIC_TAIL(4)=\"FTEN\"][CRC32(4)] (CRC32는 파일 전체 기준) 서버: [FinalStatus(1): 0x00=OK, 0xFF=ERROR]"
  },
  "api/HYSoft.Communication.Tcp.Server.TcpDataReceivedContext.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.TcpDataReceivedContext.html",
    "title": "Class TcpDataReceivedContext | HYSoft",
    "summary": "Class TcpDataReceivedContext TCP 서버에서 특정 클라이언트로부터 데이터가 수신되었을 때 전달되는 컨텍스트입니다. Inheritance object TcpDataReceivedContext Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Server Assembly: Communication.dll Syntax public sealed class TcpDataReceivedContext Constructors View Source TcpDataReceivedContext(TcpServer, Guid, byte[]) TCP 서버에서 특정 클라이언트로부터 데이터가 수신되었을 때 전달되는 컨텍스트입니다. Declaration public TcpDataReceivedContext(TcpServer tcpServer, Guid clientId, byte[] data) Parameters Type Name Description TcpServer tcpServer 데이터를 수신한 TcpServer 인스턴스입니다. Guid clientId 데이터를 전송한 클라이언트의 고유 식별자입니다. byte[] data 수신된 원본 데이터입니다. Fields View Source ClientId 클라이언트의 고유 GUID입니다. Declaration public readonly Guid ClientId Field Value Type Description Guid View Source Data 클라이언트로부터 수신된 데이터 바이트 배열입니다. Declaration public readonly byte[] Data Field Value Type Description byte[] Methods View Source ReplyAsync(byte[]) 수신한 클라이언트에게 응답 데이터를 비동기적으로 전송합니다. Declaration public Task<bool> ReplyAsync(byte[] data) Parameters Type Name Description byte[] data 전송할 데이터 바이트 배열입니다. Returns Type Description Task<bool> 성공 여부를 나타내는 Task<TResult>."
  },
  "api/HYSoft.Communication.Tcp.Server.TcpDataReceivedEventHandler.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.TcpDataReceivedEventHandler.html",
    "title": "Delegate TcpDataReceivedEventHandler | HYSoft",
    "summary": "Delegate TcpDataReceivedEventHandler TCP 서버에서 클라이언트로부터 데이터가 수신되었을 때 호출되는 이벤트 핸들러를 나타냅니다. Namespace: HYSoft.Communication.Tcp.Server Assembly: Communication.dll Syntax public delegate void TcpDataReceivedEventHandler(TcpDataReceivedContext context) Parameters Type Name Description TcpDataReceivedContext context 수신된 데이터와 응답을 보낼 수 있는 기능을 포함한 TcpDataReceivedContext 객체입니다. Constructors View Source TcpDataReceivedEventHandler(object, nint) Declaration public TcpDataReceivedEventHandler(object @object, nint method) Parameters Type Name Description object object nint method Methods View Source BeginInvoke(TcpDataReceivedContext, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(TcpDataReceivedContext context, AsyncCallback callback, object @object) Parameters Type Name Description TcpDataReceivedContext context AsyncCallback callback object object Returns Type Description IAsyncResult View Source EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result View Source Invoke(TcpDataReceivedContext) Declaration public virtual void Invoke(TcpDataReceivedContext context) Parameters Type Name Description TcpDataReceivedContext context"
  },
  "api/HYSoft.Communication.Tcp.Server.TcpServer.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.TcpServer.html",
    "title": "Class TcpServer | HYSoft",
    "summary": "Class TcpServer 비동기 TCP 서버. 연결/해제/수신 이벤트 제공, 개별 송신/브로드캐스트 지원. Inheritance object TcpServer Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Server Assembly: Communication.dll Syntax public sealed class TcpServer Fields View Source Guid 서버 인스턴스의 고유 식별자입니다. Declaration public readonly Guid Guid Field Value Type Description Guid Properties View Source ConnectedCount 현재 연결되어 있는 클라이언트 수를 반환합니다. Declaration public int ConnectedCount { get; } Property Value Type Description int View Source IsDisposed 이 인스턴스가 이미 해제(Dispose)되었는지 여부를 나타냅니다. Declaration public bool IsDisposed { get; } Property Value Type Description bool View Source LogError 오류 발생 시 호출되는 외부 로깅 델리게이트입니다. 첫 번째 매개변수는 예외, 두 번째 매개변수는 설명 메시지입니다. Declaration public Action<Exception, string>? LogError { get; init; } Property Value Type Description Action<Exception, string> Methods View Source BroadcastAsync(ReadOnlyMemory<byte>, CancellationToken) 현재 연결된 모든 클라이언트에게 데이터를 브로드캐스트합니다. Declaration public Task<int> BroadcastAsync(ReadOnlyMemory<byte> data, CancellationToken ct = default) Parameters Type Name Description ReadOnlyMemory<byte> data 전송할 데이터 버퍼. CancellationToken ct 전송 작업을 취소하기 위한 토큰(선택). Returns Type Description Task<int> 성공적으로 전송된 클라이언트 수를 반환합니다. View Source Disconnect(Guid) 지정한 클라이언트 연결을 강제로 끊습니다. Declaration public bool Disconnect(Guid clientId) Parameters Type Name Description Guid clientId 연결을 끊을 클라이언트의 ID. Returns Type Description bool 연결이 존재하여 정상적으로 제거되면 true, 그렇지 않으면 false. View Source GetClientsSnapshot() 현재 연결된 클라이언트의 스냅샷을 (클라이언트 ID, 원격 EndPoint) 배열로 반환합니다. Declaration public (Guid Id, EndPoint? Remote)[] GetClientsSnapshot() Returns Type Description (Guid Id, EndPoint Remote)[] (Client Id, Remote EndPoint) 쌍의 배열. View Source SendAsync(Guid, ReadOnlyMemory<byte>, CancellationToken) 지정한 클라이언트에 데이터를 비동기적으로 전송합니다. Declaration public Task<bool> SendAsync(Guid clientId, ReadOnlyMemory<byte> data, CancellationToken ct = default) Parameters Type Name Description Guid clientId 대상 클라이언트 ID. ReadOnlyMemory<byte> data 전송할 데이터 버퍼. CancellationToken ct 전송 작업을 취소하기 위한 토큰(선택). Returns Type Description Task<bool> 성공 시 true, 실패 시 false를 반환합니다. View Source StartAsync() 서버를 시작하고 클라이언트 연결 수락 루프를 비동기적으로 실행합니다. Declaration public Task StartAsync() Returns Type Description Task 비동기 작업을 나타내는 Task. View Source StopAsync() 서버를 중지하고 모든 클라이언트 연결을 종료합니다. Declaration public Task StopAsync() Returns Type Description Task 비동기 작업을 나타내는 Task. Events View Source DataReceived 클라이언트로부터 데이터가 수신되었을 때 발생하는 이벤트입니다. Declaration public event TcpDataReceivedEventHandler? DataReceived Event Type Type Description TcpDataReceivedEventHandler"
  },
  "api/HYSoft.Communication.Tcp.Server.TcpServerManager.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.TcpServerManager.html",
    "title": "Class TcpServerManager | HYSoft",
    "summary": "Class TcpServerManager TcpServer 인스턴스를 생성하고 관리하는 정적 매니저 클래스입니다. Inheritance object TcpServerManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Server Assembly: Communication.dll Syntax public static class TcpServerManager Methods View Source Create(TcpServerOptions) 지정된 옵션을 사용하여 새로운 TcpServer 인스턴스를 생성하고 등록합니다. Declaration public static TcpServer Create(TcpServerOptions options) Parameters Type Name Description TcpServerOptions options 서버 생성 시 사용할 TcpServerOptions입니다. Returns Type Description TcpServer 생성된 TcpServer 인스턴스입니다. Exceptions Type Condition ArgumentNullException options가 null인 경우 발생합니다. InvalidOperationException 서버를 내부 딕셔너리에 등록하지 못한 경우 발생합니다. View Source Dispose(TcpServer) 지정된 TcpServer 인스턴스를 해제(dispose)하고 내부 관리 목록에서 제거합니다. Declaration public static void Dispose(TcpServer server) Parameters Type Name Description TcpServer server 해제할 TcpServer 인스턴스입니다. Exceptions Type Condition ArgumentNullException server가 null인 경우 발생합니다."
  },
  "api/HYSoft.Communication.Tcp.Server.TcpServerOptions.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.TcpServerOptions.html",
    "title": "Class TcpServerOptions | HYSoft",
    "summary": "Class TcpServerOptions TCP 서버 동작을 설정하기 위한 옵션 클래스입니다. Inheritance object TcpServerOptions Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: HYSoft.Communication.Tcp.Server Assembly: Communication.dll Syntax public sealed class TcpServerOptions Constructors View Source TcpServerOptions(IPAddress, int) TCP 서버 동작을 설정하기 위한 옵션 클래스입니다. Declaration public TcpServerOptions(IPAddress listenAddress, int port) Parameters Type Name Description IPAddress listenAddress 서버가 바인딩할 IP 주소입니다. int port 서버가 바인딩할 포트 번호입니다. Properties View Source BackLog 대기열(Backlog)의 크기를 가져오거나 설정합니다. 클라이언트 연결 요청을 처리하기 전에 큐에 쌓을 수 있는 최대 개수를 나타냅니다. 기본값은 100입니다. Declaration public int BackLog { get; set; } Property Value Type Description int View Source ListenAddress 서버가 바인딩할 IP 주소를 가져옵니다. Declaration public IPAddress ListenAddress { get; init; } Property Value Type Description IPAddress View Source MaxClients 동시에 연결 가능한 최대 클라이언트 수를 가져옵니다. 기본값은 1024입니다. Declaration public int MaxClients { get; init; } Property Value Type Description int View Source NoDelay TCP 연결에 Nagle 알고리즘을 사용하지 않도록 설정할지 여부를 나타냅니다. 기본값은 true이며, 지연 없이 데이터를 즉시 전송합니다. Declaration public bool NoDelay { get; set; } Property Value Type Description bool View Source Port 서버가 바인딩할 포트 번호를 가져옵니다. Declaration public int Port { get; init; } Property Value Type Description int View Source ReceiveBufferSize 소켓 수신 버퍼의 크기를 가져오거나 설정합니다. (바이트 단위) 기본값은 64KB입니다. Declaration public int ReceiveBufferSize { get; set; } Property Value Type Description int View Source SendBufferSize 소켓 송신 버퍼의 크기를 가져오거나 설정합니다. (바이트 단위) 기본값은 64KB입니다. Declaration public int SendBufferSize { get; set; } Property Value Type Description int"
  },
  "api/HYSoft.Communication.Tcp.Server.html": {
    "href": "api/HYSoft.Communication.Tcp.Server.html",
    "title": "Namespace HYSoft.Communication.Tcp.Server | HYSoft",
    "summary": "Namespace HYSoft.Communication.Tcp.Server Classes TcpDataReceivedContext TCP 서버에서 특정 클라이언트로부터 데이터가 수신되었을 때 전달되는 컨텍스트입니다. TcpServer 비동기 TCP 서버. 연결/해제/수신 이벤트 제공, 개별 송신/브로드캐스트 지원. TcpServerManager TcpServer 인스턴스를 생성하고 관리하는 정적 매니저 클래스입니다. TcpServerOptions TCP 서버 동작을 설정하기 위한 옵션 클래스입니다. Delegates TcpDataReceivedEventHandler TCP 서버에서 클라이언트로부터 데이터가 수신되었을 때 호출되는 이벤트 핸들러를 나타냅니다."
  },
  "index.html": {
    "href": "index.html",
    "title": "HYSoft Communication Docs | HYSoft",
    "summary": "HYSoft Communication Docs 여기서 시작하세요 \uD83D\uDC47 빠른 시작: 서버/클라이언트 샘플 실행 API 문서: 좌측 메뉴의 API Reference 클릭"
  }
}