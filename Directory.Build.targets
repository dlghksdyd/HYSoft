<Project>
	<PropertyGroup>
		<PublishedVersionFile>$(MSBuildThisFileDirectory).last_published_version</PublishedVersionFile>
		<!-- Bundle 스테이징 경로 -->
		<HysoftBundleStageLib>$(SolutionDir)src\Bundle\Staging\$(TargetFramework)\</HysoftBundleStageLib>
	</PropertyGroup>

	<!-- Global Xmlns 생성 -->
	<Target Name="GenerateGlobalXmlns"
	        BeforeTargets="BeforeCompile"
	        Inputs="@(Compile);$(HysoftXmlns);$(HysoftXmlnsPrefix);$(HysoftXmlnsIncludeAll);$(MSBuildAllProjects)"
	        Outputs="$(IntermediateOutputPath)GlobalXmlns.g.cs">

		<WriteLinesToFile
			File="$(IntermediateOutputPath)globalxmlns.filelist.txt"
			Lines="@(Compile->'%(FullPath)')"
			Overwrite="true"
			Encoding="UTF-8" />

		<Exec Command="&quot;$(HysoftPwshExe)&quot; -NoProfile -ExecutionPolicy Bypass -File &quot;$(HysoftScriptsDir)Generate-GlobalXmlns.ps1&quot; -Url &quot;$(HysoftXmlns)&quot; -Prefix &quot;$(HysoftXmlnsPrefix)&quot; -IncludeAll:$(HysoftXmlnsIncludeAll) -FilesList &quot;$(IntermediateOutputPath)globalxmlns.filelist.txt&quot; -OutputFile &quot;$(IntermediateOutputPath)GlobalXmlns.g.cs&quot;" />

		<ItemGroup>
			<Compile Include="$(IntermediateOutputPath)GlobalXmlns.g.cs">
				<Visible>false</Visible>
				<AutoGen>true</AutoGen>
				<DesignTimeSharedInput>true</DesignTimeSharedInput>
			</Compile>
		</ItemGroup>
	</Target>

	<!-- 마지막으로 성공 푸시한 버전을 로드 -->
	<Target Name="LoadLastPublishedVersion" Condition="'$(NUGET_API_KEY)'!=''">
		<PropertyGroup>
			<LastPublishedVersion></LastPublishedVersion>
		</PropertyGroup>

		<ReadLinesFromFile File="$(PublishedVersionFile)" Condition="Exists('$(PublishedVersionFile)')">
			<Output TaskParameter="Lines" ItemName="_LastPubVerLines" />
		</ReadLinesFromFile>

		<PropertyGroup Condition="'@(_LastPubVerLines)'!=''">
			<LastPublishedVersion>@(_LastPubVerLines->'%(Identity)')</LastPublishedVersion>
		</PropertyGroup>
	</Target>

	<!-- Pack 이후, push 실행 (Bundle 프로젝트에서만) -->
	<Target Name="PublishNuGetOnPack"
			AfterTargets="Pack"
			DependsOnTargets="LoadLastPublishedVersion"
			Condition="'$(Configuration)'=='Release' and '$(NUGET_API_KEY)'!='' and '$(MSBuildProjectName)'=='Bundle'">

		<Exec Command="cmd /c set DOTNET_CLI_UI_LANGUAGE=en &amp;&amp; dotnet nuget push &quot;$(PackageOutputPath)$(PackageId).$(Version).nupkg&quot; --api-key $(NUGET_API_KEY) --source https://api.nuget.org/v3/index.json --skip-duplicate" />

		<WriteLinesToFile Condition="'$(Version)'!='$(LastPublishedVersion)'"
						  File="$(PublishedVersionFile)"
						  Lines="$(Version)"
						  Overwrite="true" />
	</Target>

	<!-- Clean 시 GlobalXmlns 생성물 삭제 -->
	<Target Name="CleanGlobalXmlns" AfterTargets="Clean">
		<Delete Files="$(IntermediateOutputPath)GlobalXmlns.g.cs" />
		<Delete Files="$(IntermediateOutputPath)globalxmlns.filelist.txt" />
	</Target>

	<!-- 프로젝트 빌드 후, 산출물을 Bundle의 스테이징으로 복사 -->
	<Target Name="CopyOutputToBundleStage" AfterTargets="Build"
			Condition="'$(MSBuildProjectName)' != 'Samples' And '$(MSBuildProjectName)' != 'Bundle'">

		<!-- 만약 스테이징 디렉토리가 없으면 생성 -->
		<MakeDir Directories="$(HysoftBundleStageLib)" Condition="!Exists('$(HysoftBundleStageLib)')" />

		<!-- 이 프로젝트의 산출물 선정 -->
		<ItemGroup>
			<__OutDll Include="$(TargetPath)" Condition="Exists('$(TargetPath)')" />
			<__OutXml Include="$(OutputPath)$(AssemblyName).xml" Condition="Exists('$(OutputPath)$(AssemblyName).xml')" />
		</ItemGroup>

		<!-- 스테이징으로 복사 -->
		<Copy SourceFiles="@(__OutDll)" DestinationFolder="$(HysoftBundleStageLib)" SkipUnchangedFiles="true" Condition="'@(__OutDll)'!=''" />
		<Copy SourceFiles="@(__OutXml)" DestinationFolder="$(HysoftBundleStageLib)" SkipUnchangedFiles="true" Condition="'@(__OutXml)'!=''" />
	</Target>
</Project>
